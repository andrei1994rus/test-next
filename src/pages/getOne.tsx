import Head from 'next/head';
import {FormControl,FormHelperText,Input,InputLabel,Button} from '@mui/material';
import dynamic from 'next/dynamic';
import IServerSideProps from '@/interfaces/IServerSideProps';
import {useMemo,useRef,useState} from 'react';

const helperText=`Input index for request. Example request: /api/name/{index}.
Where {index}-inputed index.`;
const warningText='Input is empty. Input index.';

const MyModal=dynamic(()=>import('@/components/modal'));

export async function getServerSideProps()
{
  const API=process.env.NEXT_DOMAIN_GET_ONE!
  
  return {
    props: 
    {
      API: API
    }
  };
}


export default function GetOne({API}:IServerSideProps)
{
  const [value,setValue]=useState('');
  const warning=useRef('');
  const input:any=useRef();

  const setWarningText=()=>
  {
    if(!input.current.value.trim())
    {
      warning.current=warningText;
    }

    else
    {
      warning.current='';
    }
  };


  const request=()=>
  {
    setWarningText();
    setValue(input?.current?.value);
  };

  const reset=()=>
  {
    input.current.value='';
    setValue(input?.current?.value);
  }

  const memoShowModal=useMemo(()=>
  {
    if(!value.trim())
    {
      return false;
    }

    return true;
  },[value]);

  return (
    <>
      <Head>
        <title>Get name by index</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main style={{display: 'flex', justifyContent: 'center', paddingTop: '2vh', paddingLeft:'2vh'}}>
        <FormControl>
          <InputLabel className='main__input-label' htmlFor='input'>Index</InputLabel>
          <Input id='input' inputRef={input} aria-describedby='helper-text'/>
          <FormHelperText id='helper-text' style={{marginLeft: 0, marginRight: 0}}>{helperText}</FormHelperText>
          <Button onClick={request} style={{paddingTop: '1vh'}}color='success' variant='contained'>Get name</Button>
          {memoShowModal && <MyModal url={API} value={value} reset={reset}/>}
          {warning.current && <span>{warning.current}</span>}
        </FormControl>
      </main>
    </>
  )
}